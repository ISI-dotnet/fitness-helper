// <auto-generated />
using System;
using Backend.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240909060435_LinkSetEfficiency")]
    partial class LinkSetEfficiency
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Infrastructure.Models.Achievment", b =>
                {
                    b.Property<int>("AchievmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AchievmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievmentId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("UrlImage");

                    b.HasKey("AchievmentId");

                    b.ToTable("Achievment", (string)null);

                    b.HasData(
                        new
                        {
                            AchievmentId = 1,
                            Description = "Finish Your First Training Session",
                            Name = "First Steps",
                            UrlImage = "https://cdn-icons-png.flaticon.com/512/7173/7173358.png"
                        },
                        new
                        {
                            AchievmentId = 2,
                            Description = "Finish 10 Training Sessions",
                            Name = "On The Right Way",
                            UrlImage = "https://www.k2ksigns.com.au/cdn/shop/products/TRS45-PedestrianRightway_1200x1200.jpg?v=1681423354"
                        },
                        new
                        {
                            AchievmentId = 3,
                            Description = "Finish 50 Training Sessions",
                            Name = "You Got Better",
                            UrlImage = "https://png.pngtree.com/png-vector/20240805/ourlarge/pngtree-retro-distressed-sticker-of-a-cartoon-burning-direction-arrow-png-image_13088695.png"
                        },
                        new
                        {
                            AchievmentId = 4,
                            Description = "Finish 5 Basical Training Sessions",
                            Name = "Learn From The Best",
                            UrlImage = "https://thumbs.dreamstime.com/b/strong-arm-showing-biceps-muscle-strong-arm-showing-its-biceps-muscle-illustration-134575504.jpg"
                        },
                        new
                        {
                            AchievmentId = 5,
                            Description = "Finish 5 Your Own Trainings",
                            Name = "Train On Your Own",
                            UrlImage = "https://images.emojiterra.com/google/noto-emoji/unicode-15.1/color/1024px/1f60e.png"
                        },
                        new
                        {
                            AchievmentId = 6,
                            Description = "Create your first custom workout plan",
                            Name = "Creator",
                            UrlImage = "https://images.emojiterra.com/twitter/v13.1/512px/1f5d2.png"
                        },
                        new
                        {
                            AchievmentId = 7,
                            Description = "Explore 5 different workout plans",
                            Name = "Researcher",
                            UrlImage = "https://cdn1.iconfinder.com/data/icons/smashicons-emoticons-retro-vol-1/60/37_-_Explorer_emoticon_emoji_face-512.png"
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetEfficiency", b =>
                {
                    b.Property<int>("EfficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EfficiencyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EfficiencyId"), 1L, 1);

                    b.Property<int>("Abs")
                        .HasColumnType("int")
                        .HasColumnName("Abs");

                    b.Property<int>("Arms")
                        .HasColumnType("int")
                        .HasColumnName("Arms");

                    b.Property<int>("Back")
                        .HasColumnType("int")
                        .HasColumnName("Back");

                    b.Property<int>("BasicalSetId")
                        .HasColumnType("int");

                    b.Property<int>("Cardio")
                        .HasColumnType("int")
                        .HasColumnName("Cardio");

                    b.Property<int>("Chest")
                        .HasColumnType("int")
                        .HasColumnName("Chest");

                    b.Property<int>("Legs")
                        .HasColumnType("int")
                        .HasColumnName("Legs");

                    b.HasKey("EfficiencyId");

                    b.ToTable("BasicalSetEfficiency", (string)null);

                    b.HasData(
                        new
                        {
                            EfficiencyId = 1,
                            Abs = 2,
                            Arms = 3,
                            Back = 1,
                            BasicalSetId = 1,
                            Cardio = 0,
                            Chest = 5,
                            Legs = 4
                        },
                        new
                        {
                            EfficiencyId = 2,
                            Abs = 2,
                            Arms = 3,
                            Back = 1,
                            BasicalSetId = 2,
                            Cardio = 1,
                            Chest = 4,
                            Legs = 0
                        },
                        new
                        {
                            EfficiencyId = 3,
                            Abs = 3,
                            Arms = 2,
                            Back = 1,
                            BasicalSetId = 3,
                            Cardio = 1,
                            Chest = 0,
                            Legs = 3
                        },
                        new
                        {
                            EfficiencyId = 4,
                            Abs = 2,
                            Arms = 0,
                            Back = 1,
                            BasicalSetId = 4,
                            Cardio = 0,
                            Chest = 0,
                            Legs = 5
                        },
                        new
                        {
                            EfficiencyId = 5,
                            Abs = 3,
                            Arms = 2,
                            Back = 1,
                            BasicalSetId = 5,
                            Cardio = 1,
                            Chest = 0,
                            Legs = 3
                        },
                        new
                        {
                            EfficiencyId = 6,
                            Abs = 2,
                            Arms = 3,
                            Back = 1,
                            BasicalSetId = 6,
                            Cardio = 0,
                            Chest = 0,
                            Legs = 0
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasicalSetId")
                        .HasColumnType("int")
                        .HasColumnName("BasicalSetId");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseId");

                    b.HasKey("Id");

                    b.HasIndex("BasicalSetId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("BasicalSetExercise", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicalSetId = 1,
                            ExerciseId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasicalSetId = 1,
                            ExerciseId = 3
                        },
                        new
                        {
                            Id = 3,
                            BasicalSetId = 2,
                            ExerciseId = 1
                        },
                        new
                        {
                            Id = 4,
                            BasicalSetId = 2,
                            ExerciseId = 2
                        },
                        new
                        {
                            Id = 5,
                            BasicalSetId = 3,
                            ExerciseId = 1
                        },
                        new
                        {
                            Id = 6,
                            BasicalSetId = 3,
                            ExerciseId = 3
                        },
                        new
                        {
                            Id = 7,
                            BasicalSetId = 4,
                            ExerciseId = 3
                        },
                        new
                        {
                            Id = 8,
                            BasicalSetId = 5,
                            ExerciseId = 1
                        },
                        new
                        {
                            Id = 9,
                            BasicalSetId = 5,
                            ExerciseId = 3
                        },
                        new
                        {
                            Id = 10,
                            BasicalSetId = 6,
                            ExerciseId = 2
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetOfExercises", b =>
                {
                    b.Property<int>("BasicalSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BasicalSetId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("Section")
                        .HasColumnType("int")
                        .HasColumnName("Section");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UrlImage");

                    b.HasKey("BasicalSetId");

                    b.ToTable("BasicalSetOfExercises", (string)null);

                    b.HasData(
                        new
                        {
                            BasicalSetId = 1,
                            Description = "A workout plan designed to target all major muscle groups for mass gain.",
                            Name = "Full Body Mass Gain",
                            Section = 1,
                            UrlImage = "https://www.dmoose.com/cdn/shop/articles/feature-image_8fe9c007-78d4-4a6e-b08c-20692f4b84b0.jpg?v=1682514044"
                        },
                        new
                        {
                            BasicalSetId = 2,
                            Description = "An upper body workout focused on bulking up your chest, shoulders, and arms.",
                            Name = "Upper Body Bulk",
                            Section = 1,
                            UrlImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQPdPHrTAb2xqkDfT7DMtU-2ddq8WBsTjZ-Pw&s"
                        },
                        new
                        {
                            BasicalSetId = 3,
                            Description = "A high-intensity circuit workout for fat loss, combining cardio with strength exercises.",
                            Name = "Fat Blasting Circuit",
                            Section = 2,
                            UrlImage = "https://skinnyms.com/wp-content/uploads/2016/05/5-Calorie-Crushing-No-Equipment-Exercises.jpg"
                        },
                        new
                        {
                            BasicalSetId = 4,
                            Description = "A workout focused on sculpting your legs and abs, aimed at fat loss.",
                            Name = "Legs and Abs Shred",
                            Section = 2,
                            UrlImage = "https://hips.hearstapps.com/hmg-prod/images/gym-instructer-doing-lunges-with-kettlebells-royalty-free-image-1585227849.jpg"
                        },
                        new
                        {
                            BasicalSetId = 5,
                            Description = "A high-intensity workout used by professional athletes to build overall strength.",
                            Name = "Pro Athlete Strength Training",
                            Section = 3,
                            UrlImage = "https://www.pogophysio.com.au/wp-content/uploads/weights-cody-blog.jpg"
                        },
                        new
                        {
                            BasicalSetId = 6,
                            Description = "An explosive workout routine focused on improving power and agility, used by elite athletes.",
                            Name = "Explosive Power Routine",
                            Section = 3,
                            UrlImage = "https://educatefitness.co.uk/wp-content/uploads/2023/04/Incorporate-Explosive-Training-into-Your-Routine.webp"
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetTraining", b =>
                {
                    b.Property<int>("BasicalTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BasicalTrainingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasicalTrainingId"), 1L, 1);

                    b.Property<int>("BasicalSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("Time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BasicalTrainingId");

                    b.HasIndex("BasicalSetId");

                    b.HasIndex("UserId");

                    b.ToTable("BasicalSetTraining", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExerciseId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UrlImage");

                    b.Property<string>("UrlVideo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UrlVideo");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercise", (string)null);

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            Description = "A basic upper body exercise targeting the pectoral muscles, triceps, and shoulders.",
                            Name = "Barbell Bench Press",
                            UrlImage = "https://cdn.muscleandstrength.com/sites/default/files/barbell-bench-press_0.jpg",
                            UrlVideo = "https://www.youtube.com/watch?v=rT7DgCr-3pg"
                        },
                        new
                        {
                            ExerciseId = 2,
                            Description = "An isolation exercise focusing on the biceps for strength and size.",
                            Name = "Bicep Curl",
                            UrlImage = "https://www.verywellfit.com/thmb/plk9oJP3KcuRnBaq8bk3sGrsVjM=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/81-3498604-Bicep-arm-curlsGIF2-c7c59f252b1a4ef9b1e181ca05e96084.jpg",
                            UrlVideo = "https://www.youtube.com/watch?v=ykJmrZ5v0Oo"
                        },
                        new
                        {
                            ExerciseId = 3,
                            Description = "A compound exercise primarily working the quadriceps, hamstrings, and glutes.",
                            Name = "Squat",
                            UrlImage = "https://res.cloudinary.com/peloton-cycle/image/fetch/f_auto,c_limit,w_3840,q_90/https://downloads.ctfassets.net/6ilvqec50fal/1EHc7nNZ4VqgTjyKoNnyvd/08a03edafa59cf2f74b591765cc68c62/Barbell-squat.jpg",
                            UrlVideo = "https://www.youtube.com/watch?v=xqvCmoLULNY"
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.ExerciseMuscles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseId");

                    b.Property<bool>("IsTarget")
                        .HasColumnType("bit")
                        .HasColumnName("IsTarget");

                    b.Property<int>("MuscleId")
                        .HasColumnType("int")
                        .HasColumnName("MuscleId");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("MuscleId");

                    b.ToTable("ExerciseMuscles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseId = 1,
                            IsTarget = true,
                            MuscleId = 3
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 1,
                            IsTarget = false,
                            MuscleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ExerciseId = 1,
                            IsTarget = false,
                            MuscleId = 5
                        },
                        new
                        {
                            Id = 4,
                            ExerciseId = 2,
                            IsTarget = true,
                            MuscleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ExerciseId = 2,
                            IsTarget = false,
                            MuscleId = 5
                        },
                        new
                        {
                            Id = 6,
                            ExerciseId = 3,
                            IsTarget = true,
                            MuscleId = 4
                        },
                        new
                        {
                            Id = 7,
                            ExerciseId = 3,
                            IsTarget = false,
                            MuscleId = 5
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Muscle", b =>
                {
                    b.Property<int>("MuscleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MuscleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuscleId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("PartOfBody")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PartOfBody");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UrlImage");

                    b.HasKey("MuscleId");

                    b.ToTable("Muscle", (string)null);

                    b.HasData(
                        new
                        {
                            MuscleId = 1,
                            Description = "A muscle of the upper arm that acts to flex the elbow and supinate the forearm.",
                            Name = "Biceps Brachii",
                            PartOfBody = "Upper Arms",
                            UrlImage = "https://www.kenhub.com/thumbor/0X8VRKFTJ5DT-6OaYklyFn42-xY=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/14480/biceps_intro.png"
                        },
                        new
                        {
                            MuscleId = 2,
                            Description = "A large muscle on the back of the upper arm, responsible for extending the elbow.",
                            Name = "Triceps Brachii",
                            PartOfBody = "Upper Arms",
                            UrlImage = "https://www.kenhub.com/thumbor/HFbTJc2AayYsrOSJMmDE5axXPvs=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/13946/aHliOOl62koJhumoZcUysg_vsBTp2iDc2_M._triceps_brachii_1.png"
                        },
                        new
                        {
                            MuscleId = 3,
                            Description = "A thick, fan-shaped muscle situated at the chest of the body, responsible for moving the arm.",
                            Name = "Pectoralis Major",
                            PartOfBody = "Chest",
                            UrlImage = "https://www.kenhub.com/thumbor/rd8CbMjXA6gntGs93sl8EYIc6lI=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/13535/Wt6B7qUeKq5WqFGlzsQ_Musculus_pectoralis_major_01.png"
                        },
                        new
                        {
                            MuscleId = 4,
                            Description = "A paired muscle running vertically on each side of the anterior wall of the human abdomen.",
                            Name = "Rectus Abdominis",
                            PartOfBody = "Waist",
                            UrlImage = "https://www.kenhub.com/thumbor/FyEucwQsZ4Kbhs4iErFa4jQplIc=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/article/rectus-abdominis-muscle/wwCbmBxMstOsHbXlWiA_jt6lkyuTYizDZFWnsiHpng_Musculus_rectus_abdominis_01.png"
                        },
                        new
                        {
                            MuscleId = 5,
                            Description = "A triangular muscle covering the shoulder joint and responsible for arm rotation.",
                            Name = "Deltoid",
                            PartOfBody = "Shoulders",
                            UrlImage = "https://www.kenhub.com/thumbor/Si1vuP8MMgFOchicWEn_Vt4qzX0=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/13537/ZjXqXLfFvjRqzu4Ue14DA_degvezVumJ_M._deltoideus_2.png"
                        },
                        new
                        {
                            MuscleId = 6,
                            Description = "A large group of muscles located at the front of the thigh, responsible for extending the knee.",
                            Name = "Quadriceps",
                            PartOfBody = "Thighs",
                            UrlImage = "https://www.kenhub.com/thumbor/08O0Lk96jBOozWw5dFgEB1G6MaM=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/13926/Op0rOgXqQB5W7THiS8Q_NmqapCoy4Z_M._quadriceps_femoris_NN_2__1_.png"
                        },
                        new
                        {
                            MuscleId = 7,
                            Description = "A group of muscles at the back of the thigh that work to flex the knee and extend the hip.",
                            Name = "Hamstrings",
                            PartOfBody = "Thighs",
                            UrlImage = "https://www.kenhub.com/thumbor/0qdCfYj-eciZ64ynl_7cdsQz4KU=/fit-in/800x1600/filters:watermark(/images/logo_url.png,-10,-10,0):background_color(FFFFFF):format(jpeg)/images/library/14013/Hamstring_muscles.png"
                        });
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserAchievment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AchievmentId")
                        .HasColumnType("int")
                        .HasColumnName("AchievmentId");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("IsDone");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AchievmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievment", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserMuscles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MuscleId")
                        .HasColumnType("int")
                        .HasColumnName("MuscleId");

                    b.Property<double>("MusclePoints")
                        .HasColumnType("float")
                        .HasColumnName("MusclePoints");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MuscleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMuscles", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("ExerciseId");

                    b.Property<int>("UserSetId")
                        .HasColumnType("int")
                        .HasColumnName("UserSetId");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserSetId");

                    b.ToTable("UserSetExercise", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetOfExercises", b =>
                {
                    b.Property<int>("UserSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserSetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSetId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserSetId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSetOfExercises", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetTraining", b =>
                {
                    b.Property<int>("UserTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTrainingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTrainingId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("Date");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("Time");

                    b.Property<int>("UserSetId")
                        .HasColumnType("int");

                    b.HasKey("UserTrainingId");

                    b.HasIndex("UserSetId");

                    b.ToTable("UserSetTraining", (string)null);
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetExercise", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.BasicalSetOfExercises", "BasicalSetOfExercises")
                        .WithMany("BasicalSetExercises")
                        .HasForeignKey("BasicalSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.Exercise", "Exercise")
                        .WithMany("BasicalSetExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicalSetOfExercises");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetOfExercises", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.BasicalSetEfficiency", "BasicalSetEfficiency")
                        .WithOne("BasicalSetOfExercises")
                        .HasForeignKey("Backend.Infrastructure.Models.BasicalSetOfExercises", "BasicalSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicalSetEfficiency");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetTraining", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.BasicalSetOfExercises", "BasicalSetOfExercises")
                        .WithMany("BasicalSetTrainings")
                        .HasForeignKey("BasicalSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.User", "User")
                        .WithMany("BasicalSetTrainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicalSetOfExercises");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.ExerciseMuscles", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Exercise", "Exercise")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.Muscle", "Muscle")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Muscle");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserAchievment", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Achievment", "Achievment")
                        .WithMany("UsersAchievments")
                        .HasForeignKey("AchievmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.User", "User")
                        .WithMany("UsersAchievments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserMuscles", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Muscle", "Muscle")
                        .WithMany("UserMuscles")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.User", "User")
                        .WithMany("UserMuscles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muscle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetExercise", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.Exercise", "Exercise")
                        .WithMany("UserSetsExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Infrastructure.Models.UserSetOfExercises", "UserSetOfExercises")
                        .WithMany("UserSetsExercises")
                        .HasForeignKey("UserSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("UserSetOfExercises");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetOfExercises", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.User", "User")
                        .WithMany("UserSetsOfExercises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetTraining", b =>
                {
                    b.HasOne("Backend.Infrastructure.Models.UserSetOfExercises", "UserSetOfExercises")
                        .WithMany("UserSetTrainings")
                        .HasForeignKey("UserSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSetOfExercises");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Achievment", b =>
                {
                    b.Navigation("UsersAchievments");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetEfficiency", b =>
                {
                    b.Navigation("BasicalSetOfExercises")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.BasicalSetOfExercises", b =>
                {
                    b.Navigation("BasicalSetExercises");

                    b.Navigation("BasicalSetTrainings");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Exercise", b =>
                {
                    b.Navigation("BasicalSetExercises");

                    b.Navigation("ExerciseMuscles");

                    b.Navigation("UserSetsExercises");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.Muscle", b =>
                {
                    b.Navigation("ExerciseMuscles");

                    b.Navigation("UserMuscles");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.User", b =>
                {
                    b.Navigation("BasicalSetTrainings");

                    b.Navigation("UserMuscles");

                    b.Navigation("UserSetsOfExercises");

                    b.Navigation("UsersAchievments");
                });

            modelBuilder.Entity("Backend.Infrastructure.Models.UserSetOfExercises", b =>
                {
                    b.Navigation("UserSetTrainings");

                    b.Navigation("UserSetsExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
